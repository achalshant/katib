/**
 * Katib API
 */
syntax = "proto3";

package db;

/**
 * Service for Main API for Katib
 * For each RPC service, we define mapping to HTTP REST API method.
 * The mapping includes the URL path, query parameters and request body.
 * https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.api#http
 */
service DBIF {

    rpc SayHello (HelloRequest) returns (HelloReply) {

    };

    rpc CreateStudy(CreateStudyRequest) returns (CreateStudyReply){
        
    };

    rpc GetStudy(GetStudyRequest) returns (GetStudyReply){
        
    };
}

enum ParameterType {
    UNKNOWN_TYPE = 0; /// Undefined type and not used.

    DOUBLE = 1; /// Double float type. Use "Max/Min".
    INT = 2; /// Int type. Use "Max/Min".
    DISCRETE = 3; /// Discrete number type. Use "List" as float.
    CATEGORICAL = 4; /// Categorical type. Use "List" as string.
}

/**
 * Direction of optimization. Minimize or Maximize.
 */
enum OptimizationType {
    UNKNOWN_OPTIMIZATION = 0; /// Undefined type and not used.

    MINIMIZE = 1; /// Minimize
    MAXIMIZE = 2; /// Maximize
}
 message Operation {
     string operationType = 1; /// Type of operation in DAG
      /** 
     * List of ParameterConfig
     */
     message ParameterConfigs {
        repeated ParameterConfig configs = 1;
    }
    ParameterConfigs parameter_configs = 2; /// List of ParameterConfig
}

message NasConfig {
    GraphConfig graph_config = 1; /// Config of DAG
    message Operations {
        repeated Operation operation = 1;
    }
    Operations operations = 2; /// List of Operation
}

message GraphConfig {
    int32 num_layers = 1; /// Number of layers
    repeated int32 input_size = 2; ///  Dimenstions of input size
    repeated int32 output_size = 3; /// Dimensions of output size
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message ParameterConfig {
    string name = 1; /// Name of the parameter.
    ParameterType parameter_type = 2; /// Type of the parameter.
    FeasibleSpace feasible = 3; /// FeasibleSpace for the parameter.
}

message Tag {
    string name = 1; /// Name of tag.
    string value = 2; /// Value of tag.
}

message FeasibleSpace {
    string max = 1; /// Max Value
    string min = 2; /// Minimum Value
    repeated string list = 3; /// List of Values.
    string step = 4; /// Step for double or int parameter
}

message StudyConfig {
    /** 
     * List of ParameterConfig
     */
    message ParameterConfigs {
        repeated ParameterConfig configs = 1;
    }
    string name = 1; /// Name of Study.
    string owner = 2; /// Owner of Study.
    OptimizationType optimization_type = 3; /// Optimization type.
    double optimization_goal = 4; /// Goal of optimization value.
    ParameterConfigs parameter_configs = 5; /// List of ParameterConfig
    repeated string access_permissions = 6; /// Access Permission
    repeated Tag tags = 7; /// Tag for Study
    string objective_value_name = 8; /// Name of objective value.
    repeated string metrics = 9; /// List of metrics name.
    string jobId = 10; /// ID of studyjob that is created from this config.
    NasConfig nas_config = 11; /// Config for NAS job
    string job_type = 12; /// Type of the job, NAS or HP
}

message CreateStudyRequest {
    StudyConfig study_config = 1;
}

/**
 * Return generated StudyID.
 */
message CreateStudyReply {
    string study_id = 1;
}

message GetStudyRequest {
    string study_id = 1;
}

/**
 * Return a config of specified Study.
 */
message GetStudyReply {
    StudyConfig study_config= 1;
}
