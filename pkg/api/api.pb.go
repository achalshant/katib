// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
	db "pkg/db"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetSuggestionsRequest struct {
	StudyId              string   `protobuf:"bytes,1,opt,name=study_id,json=studyId,proto3" json:"study_id,omitempty"`
	SuggestionAlgorithm  string   `protobuf:"bytes,2,opt,name=suggestion_algorithm,json=suggestionAlgorithm,proto3" json:"suggestion_algorithm,omitempty"`
	RequestNumber        int32    `protobuf:"varint,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	LogWorkerIds         []string `protobuf:"bytes,4,rep,name=log_worker_ids,json=logWorkerIds,proto3" json:"log_worker_ids,omitempty"`
	ParamId              string   `protobuf:"bytes,5,opt,name=param_id,json=paramId,proto3" json:"param_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSuggestionsRequest) Reset()         { *m = GetSuggestionsRequest{} }
func (m *GetSuggestionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSuggestionsRequest) ProtoMessage()    {}
func (*GetSuggestionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{0}
}

func (m *GetSuggestionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSuggestionsRequest.Unmarshal(m, b)
}
func (m *GetSuggestionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSuggestionsRequest.Marshal(b, m, deterministic)
}
func (m *GetSuggestionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestionsRequest.Merge(m, src)
}
func (m *GetSuggestionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetSuggestionsRequest.Size(m)
}
func (m *GetSuggestionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestionsRequest proto.InternalMessageInfo

func (m *GetSuggestionsRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *GetSuggestionsRequest) GetSuggestionAlgorithm() string {
	if m != nil {
		return m.SuggestionAlgorithm
	}
	return ""
}

func (m *GetSuggestionsRequest) GetRequestNumber() int32 {
	if m != nil {
		return m.RequestNumber
	}
	return 0
}

func (m *GetSuggestionsRequest) GetLogWorkerIds() []string {
	if m != nil {
		return m.LogWorkerIds
	}
	return nil
}

func (m *GetSuggestionsRequest) GetParamId() string {
	if m != nil {
		return m.ParamId
	}
	return ""
}

type GetSuggestionsReply struct {
	Trials               []*db.Trial `protobuf:"bytes,1,rep,name=trials,proto3" json:"trials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetSuggestionsReply) Reset()         { *m = GetSuggestionsReply{} }
func (m *GetSuggestionsReply) String() string { return proto.CompactTextString(m) }
func (*GetSuggestionsReply) ProtoMessage()    {}
func (*GetSuggestionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{1}
}

func (m *GetSuggestionsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSuggestionsReply.Unmarshal(m, b)
}
func (m *GetSuggestionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSuggestionsReply.Marshal(b, m, deterministic)
}
func (m *GetSuggestionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestionsReply.Merge(m, src)
}
func (m *GetSuggestionsReply) XXX_Size() int {
	return xxx_messageInfo_GetSuggestionsReply.Size(m)
}
func (m *GetSuggestionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestionsReply proto.InternalMessageInfo

func (m *GetSuggestionsReply) GetTrials() []*db.Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

type GetShouldStopWorkersRequest struct {
	StudyId                string   `protobuf:"bytes,1,opt,name=study_id,json=studyId,proto3" json:"study_id,omitempty"`
	EarlyStoppingAlgorithm string   `protobuf:"bytes,2,opt,name=early_stopping_algorithm,json=earlyStoppingAlgorithm,proto3" json:"early_stopping_algorithm,omitempty"`
	ParamId                string   `protobuf:"bytes,5,opt,name=param_id,json=paramId,proto3" json:"param_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetShouldStopWorkersRequest) Reset()         { *m = GetShouldStopWorkersRequest{} }
func (m *GetShouldStopWorkersRequest) String() string { return proto.CompactTextString(m) }
func (*GetShouldStopWorkersRequest) ProtoMessage()    {}
func (*GetShouldStopWorkersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{2}
}

func (m *GetShouldStopWorkersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetShouldStopWorkersRequest.Unmarshal(m, b)
}
func (m *GetShouldStopWorkersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetShouldStopWorkersRequest.Marshal(b, m, deterministic)
}
func (m *GetShouldStopWorkersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShouldStopWorkersRequest.Merge(m, src)
}
func (m *GetShouldStopWorkersRequest) XXX_Size() int {
	return xxx_messageInfo_GetShouldStopWorkersRequest.Size(m)
}
func (m *GetShouldStopWorkersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShouldStopWorkersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShouldStopWorkersRequest proto.InternalMessageInfo

func (m *GetShouldStopWorkersRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *GetShouldStopWorkersRequest) GetEarlyStoppingAlgorithm() string {
	if m != nil {
		return m.EarlyStoppingAlgorithm
	}
	return ""
}

func (m *GetShouldStopWorkersRequest) GetParamId() string {
	if m != nil {
		return m.ParamId
	}
	return ""
}

type GetShouldStopWorkersReply struct {
	ShouldStopWorkerIds  []string `protobuf:"bytes,1,rep,name=should_stop_worker_ids,json=shouldStopWorkerIds,proto3" json:"should_stop_worker_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetShouldStopWorkersReply) Reset()         { *m = GetShouldStopWorkersReply{} }
func (m *GetShouldStopWorkersReply) String() string { return proto.CompactTextString(m) }
func (*GetShouldStopWorkersReply) ProtoMessage()    {}
func (*GetShouldStopWorkersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{3}
}

func (m *GetShouldStopWorkersReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetShouldStopWorkersReply.Unmarshal(m, b)
}
func (m *GetShouldStopWorkersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetShouldStopWorkersReply.Marshal(b, m, deterministic)
}
func (m *GetShouldStopWorkersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShouldStopWorkersReply.Merge(m, src)
}
func (m *GetShouldStopWorkersReply) XXX_Size() int {
	return xxx_messageInfo_GetShouldStopWorkersReply.Size(m)
}
func (m *GetShouldStopWorkersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShouldStopWorkersReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetShouldStopWorkersReply proto.InternalMessageInfo

func (m *GetShouldStopWorkersReply) GetShouldStopWorkerIds() []string {
	if m != nil {
		return m.ShouldStopWorkerIds
	}
	return nil
}

type ModelInfo struct {
	StudyName            string          `protobuf:"bytes,1,opt,name=study_name,json=studyName,proto3" json:"study_name,omitempty"`
	WorkerId             string          `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Parameters           []*db.Parameter `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Metrics              []*db.Metrics   `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty"`
	ModelPath            string          `protobuf:"bytes,5,opt,name=model_path,json=modelPath,proto3" json:"model_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ModelInfo) Reset()         { *m = ModelInfo{} }
func (m *ModelInfo) String() string { return proto.CompactTextString(m) }
func (*ModelInfo) ProtoMessage()    {}
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{4}
}

func (m *ModelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModelInfo.Unmarshal(m, b)
}
func (m *ModelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModelInfo.Marshal(b, m, deterministic)
}
func (m *ModelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelInfo.Merge(m, src)
}
func (m *ModelInfo) XXX_Size() int {
	return xxx_messageInfo_ModelInfo.Size(m)
}
func (m *ModelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ModelInfo proto.InternalMessageInfo

func (m *ModelInfo) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

func (m *ModelInfo) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *ModelInfo) GetParameters() []*db.Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ModelInfo) GetMetrics() []*db.Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ModelInfo) GetModelPath() string {
	if m != nil {
		return m.ModelPath
	}
	return ""
}

type DataSetInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataSetInfo) Reset()         { *m = DataSetInfo{} }
func (m *DataSetInfo) String() string { return proto.CompactTextString(m) }
func (*DataSetInfo) ProtoMessage()    {}
func (*DataSetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{5}
}

func (m *DataSetInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataSetInfo.Unmarshal(m, b)
}
func (m *DataSetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataSetInfo.Marshal(b, m, deterministic)
}
func (m *DataSetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSetInfo.Merge(m, src)
}
func (m *DataSetInfo) XXX_Size() int {
	return xxx_messageInfo_DataSetInfo.Size(m)
}
func (m *DataSetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DataSetInfo proto.InternalMessageInfo

func (m *DataSetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataSetInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SaveStudyRequest struct {
	StudyName            string   `protobuf:"bytes,1,opt,name=study_name,json=studyName,proto3" json:"study_name,omitempty"`
	Owner                string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveStudyRequest) Reset()         { *m = SaveStudyRequest{} }
func (m *SaveStudyRequest) String() string { return proto.CompactTextString(m) }
func (*SaveStudyRequest) ProtoMessage()    {}
func (*SaveStudyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{6}
}

func (m *SaveStudyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveStudyRequest.Unmarshal(m, b)
}
func (m *SaveStudyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveStudyRequest.Marshal(b, m, deterministic)
}
func (m *SaveStudyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveStudyRequest.Merge(m, src)
}
func (m *SaveStudyRequest) XXX_Size() int {
	return xxx_messageInfo_SaveStudyRequest.Size(m)
}
func (m *SaveStudyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveStudyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveStudyRequest proto.InternalMessageInfo

func (m *SaveStudyRequest) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

func (m *SaveStudyRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *SaveStudyRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type SaveStudyReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveStudyReply) Reset()         { *m = SaveStudyReply{} }
func (m *SaveStudyReply) String() string { return proto.CompactTextString(m) }
func (*SaveStudyReply) ProtoMessage()    {}
func (*SaveStudyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{7}
}

func (m *SaveStudyReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveStudyReply.Unmarshal(m, b)
}
func (m *SaveStudyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveStudyReply.Marshal(b, m, deterministic)
}
func (m *SaveStudyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveStudyReply.Merge(m, src)
}
func (m *SaveStudyReply) XXX_Size() int {
	return xxx_messageInfo_SaveStudyReply.Size(m)
}
func (m *SaveStudyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveStudyReply.DiscardUnknown(m)
}

var xxx_messageInfo_SaveStudyReply proto.InternalMessageInfo

type SaveModelRequest struct {
	Model                *ModelInfo   `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	DataSet              *DataSetInfo `protobuf:"bytes,2,opt,name=data_set,json=dataSet,proto3" json:"data_set,omitempty"`
	TensorBoard          bool         `protobuf:"varint,3,opt,name=tensor_board,json=tensorBoard,proto3" json:"tensor_board,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SaveModelRequest) Reset()         { *m = SaveModelRequest{} }
func (m *SaveModelRequest) String() string { return proto.CompactTextString(m) }
func (*SaveModelRequest) ProtoMessage()    {}
func (*SaveModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{8}
}

func (m *SaveModelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveModelRequest.Unmarshal(m, b)
}
func (m *SaveModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveModelRequest.Marshal(b, m, deterministic)
}
func (m *SaveModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveModelRequest.Merge(m, src)
}
func (m *SaveModelRequest) XXX_Size() int {
	return xxx_messageInfo_SaveModelRequest.Size(m)
}
func (m *SaveModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveModelRequest proto.InternalMessageInfo

func (m *SaveModelRequest) GetModel() *ModelInfo {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *SaveModelRequest) GetDataSet() *DataSetInfo {
	if m != nil {
		return m.DataSet
	}
	return nil
}

func (m *SaveModelRequest) GetTensorBoard() bool {
	if m != nil {
		return m.TensorBoard
	}
	return false
}

type SaveModelReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveModelReply) Reset()         { *m = SaveModelReply{} }
func (m *SaveModelReply) String() string { return proto.CompactTextString(m) }
func (*SaveModelReply) ProtoMessage()    {}
func (*SaveModelReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{9}
}

func (m *SaveModelReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveModelReply.Unmarshal(m, b)
}
func (m *SaveModelReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveModelReply.Marshal(b, m, deterministic)
}
func (m *SaveModelReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveModelReply.Merge(m, src)
}
func (m *SaveModelReply) XXX_Size() int {
	return xxx_messageInfo_SaveModelReply.Size(m)
}
func (m *SaveModelReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveModelReply.DiscardUnknown(m)
}

var xxx_messageInfo_SaveModelReply proto.InternalMessageInfo

type GetSavedStudiesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSavedStudiesRequest) Reset()         { *m = GetSavedStudiesRequest{} }
func (m *GetSavedStudiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetSavedStudiesRequest) ProtoMessage()    {}
func (*GetSavedStudiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{10}
}

func (m *GetSavedStudiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSavedStudiesRequest.Unmarshal(m, b)
}
func (m *GetSavedStudiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSavedStudiesRequest.Marshal(b, m, deterministic)
}
func (m *GetSavedStudiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSavedStudiesRequest.Merge(m, src)
}
func (m *GetSavedStudiesRequest) XXX_Size() int {
	return xxx_messageInfo_GetSavedStudiesRequest.Size(m)
}
func (m *GetSavedStudiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSavedStudiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSavedStudiesRequest proto.InternalMessageInfo

type GetSavedStudiesReply struct {
	Studies              []*db.StudyOverview `protobuf:"bytes,1,rep,name=studies,proto3" json:"studies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetSavedStudiesReply) Reset()         { *m = GetSavedStudiesReply{} }
func (m *GetSavedStudiesReply) String() string { return proto.CompactTextString(m) }
func (*GetSavedStudiesReply) ProtoMessage()    {}
func (*GetSavedStudiesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{11}
}

func (m *GetSavedStudiesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSavedStudiesReply.Unmarshal(m, b)
}
func (m *GetSavedStudiesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSavedStudiesReply.Marshal(b, m, deterministic)
}
func (m *GetSavedStudiesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSavedStudiesReply.Merge(m, src)
}
func (m *GetSavedStudiesReply) XXX_Size() int {
	return xxx_messageInfo_GetSavedStudiesReply.Size(m)
}
func (m *GetSavedStudiesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSavedStudiesReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSavedStudiesReply proto.InternalMessageInfo

func (m *GetSavedStudiesReply) GetStudies() []*db.StudyOverview {
	if m != nil {
		return m.Studies
	}
	return nil
}

type GetSavedModelsRequest struct {
	StudyName            string   `protobuf:"bytes,1,opt,name=study_name,json=studyName,proto3" json:"study_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSavedModelsRequest) Reset()         { *m = GetSavedModelsRequest{} }
func (m *GetSavedModelsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSavedModelsRequest) ProtoMessage()    {}
func (*GetSavedModelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{12}
}

func (m *GetSavedModelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSavedModelsRequest.Unmarshal(m, b)
}
func (m *GetSavedModelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSavedModelsRequest.Marshal(b, m, deterministic)
}
func (m *GetSavedModelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSavedModelsRequest.Merge(m, src)
}
func (m *GetSavedModelsRequest) XXX_Size() int {
	return xxx_messageInfo_GetSavedModelsRequest.Size(m)
}
func (m *GetSavedModelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSavedModelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSavedModelsRequest proto.InternalMessageInfo

func (m *GetSavedModelsRequest) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

type GetSavedModelsReply struct {
	Models               []*ModelInfo `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetSavedModelsReply) Reset()         { *m = GetSavedModelsReply{} }
func (m *GetSavedModelsReply) String() string { return proto.CompactTextString(m) }
func (*GetSavedModelsReply) ProtoMessage()    {}
func (*GetSavedModelsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{13}
}

func (m *GetSavedModelsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSavedModelsReply.Unmarshal(m, b)
}
func (m *GetSavedModelsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSavedModelsReply.Marshal(b, m, deterministic)
}
func (m *GetSavedModelsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSavedModelsReply.Merge(m, src)
}
func (m *GetSavedModelsReply) XXX_Size() int {
	return xxx_messageInfo_GetSavedModelsReply.Size(m)
}
func (m *GetSavedModelsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSavedModelsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSavedModelsReply proto.InternalMessageInfo

func (m *GetSavedModelsReply) GetModels() []*ModelInfo {
	if m != nil {
		return m.Models
	}
	return nil
}

type GetSavedModelRequest struct {
	StudyName            string   `protobuf:"bytes,1,opt,name=study_name,json=studyName,proto3" json:"study_name,omitempty"`
	WorkerId             string   `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSavedModelRequest) Reset()         { *m = GetSavedModelRequest{} }
func (m *GetSavedModelRequest) String() string { return proto.CompactTextString(m) }
func (*GetSavedModelRequest) ProtoMessage()    {}
func (*GetSavedModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{14}
}

func (m *GetSavedModelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSavedModelRequest.Unmarshal(m, b)
}
func (m *GetSavedModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSavedModelRequest.Marshal(b, m, deterministic)
}
func (m *GetSavedModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSavedModelRequest.Merge(m, src)
}
func (m *GetSavedModelRequest) XXX_Size() int {
	return xxx_messageInfo_GetSavedModelRequest.Size(m)
}
func (m *GetSavedModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSavedModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSavedModelRequest proto.InternalMessageInfo

func (m *GetSavedModelRequest) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

func (m *GetSavedModelRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

type GetSavedModelReply struct {
	Model                *ModelInfo `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetSavedModelReply) Reset()         { *m = GetSavedModelReply{} }
func (m *GetSavedModelReply) String() string { return proto.CompactTextString(m) }
func (*GetSavedModelReply) ProtoMessage()    {}
func (*GetSavedModelReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e50ccc58c7b575d, []int{15}
}

func (m *GetSavedModelReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSavedModelReply.Unmarshal(m, b)
}
func (m *GetSavedModelReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSavedModelReply.Marshal(b, m, deterministic)
}
func (m *GetSavedModelReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSavedModelReply.Merge(m, src)
}
func (m *GetSavedModelReply) XXX_Size() int {
	return xxx_messageInfo_GetSavedModelReply.Size(m)
}
func (m *GetSavedModelReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSavedModelReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSavedModelReply proto.InternalMessageInfo

func (m *GetSavedModelReply) GetModel() *ModelInfo {
	if m != nil {
		return m.Model
	}
	return nil
}

func init() {
	proto.RegisterType((*GetSuggestionsRequest)(nil), "api.GetSuggestionsRequest")
	proto.RegisterType((*GetSuggestionsReply)(nil), "api.GetSuggestionsReply")
	proto.RegisterType((*GetShouldStopWorkersRequest)(nil), "api.GetShouldStopWorkersRequest")
	proto.RegisterType((*GetShouldStopWorkersReply)(nil), "api.GetShouldStopWorkersReply")
	proto.RegisterType((*ModelInfo)(nil), "api.ModelInfo")
	proto.RegisterType((*DataSetInfo)(nil), "api.DataSetInfo")
	proto.RegisterType((*SaveStudyRequest)(nil), "api.SaveStudyRequest")
	proto.RegisterType((*SaveStudyReply)(nil), "api.SaveStudyReply")
	proto.RegisterType((*SaveModelRequest)(nil), "api.SaveModelRequest")
	proto.RegisterType((*SaveModelReply)(nil), "api.SaveModelReply")
	proto.RegisterType((*GetSavedStudiesRequest)(nil), "api.GetSavedStudiesRequest")
	proto.RegisterType((*GetSavedStudiesReply)(nil), "api.GetSavedStudiesReply")
	proto.RegisterType((*GetSavedModelsRequest)(nil), "api.GetSavedModelsRequest")
	proto.RegisterType((*GetSavedModelsReply)(nil), "api.GetSavedModelsReply")
	proto.RegisterType((*GetSavedModelRequest)(nil), "api.GetSavedModelRequest")
	proto.RegisterType((*GetSavedModelReply)(nil), "api.GetSavedModelReply")
}

func init() { proto.RegisterFile("pkg/api/api.proto", fileDescriptor_7e50ccc58c7b575d) }

var fileDescriptor_7e50ccc58c7b575d = []byte{
	// 1223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xc6, 0x4d, 0xf3, 0xe3, 0xe3, 0xc4, 0x24, 0xe3, 0xfc, 0x38, 0x76, 0x52, 0x39, 0xdb, 0x24,
	0x8a, 0x88, 0x48, 0xc0, 0x85, 0x52, 0x45, 0x8a, 0x04, 0xb4, 0xd4, 0x8a, 0xd4, 0x34, 0xd1, 0xba,
	0x08, 0xc4, 0x8d, 0x35, 0xee, 0x4e, 0x37, 0x4b, 0xd6, 0xde, 0x65, 0x67, 0x9c, 0x28, 0xb7, 0x5c,
	0x71, 0x83, 0x84, 0xc4, 0xeb, 0xf0, 0x0a, 0x5c, 0xf1, 0x0a, 0x3c, 0x04, 0x97, 0x68, 0xce, 0xec,
	0xac, 0x67, 0xd7, 0x6b, 0xc7, 0x12, 0xf4, 0x22, 0x92, 0xf7, 0x3b, 0x3f, 0xdf, 0x77, 0xce, 0xcc,
	0x9c, 0x99, 0xc0, 0x4a, 0x78, 0xed, 0x1e, 0xd3, 0xd0, 0x93, 0x7f, 0x47, 0x61, 0x14, 0x88, 0x80,
	0xcc, 0xd0, 0xd0, 0xab, 0x6d, 0xb9, 0x41, 0xe0, 0xfa, 0x4c, 0x99, 0xfa, 0xfd, 0x40, 0x50, 0xe1,
	0x05, 0x7d, 0xae, 0x5c, 0x6a, 0x18, 0xe5, 0x74, 0x8f, 0x9d, 0xae, 0xf7, 0x4e, 0x41, 0xd6, 0x9f,
	0x05, 0x58, 0x6b, 0x31, 0xd1, 0x1e, 0xb8, 0x2e, 0xe3, 0xe8, 0x6b, 0xb3, 0x9f, 0x06, 0x8c, 0x0b,
	0xb2, 0x09, 0x0b, 0x5c, 0x0c, 0x9c, 0xbb, 0x8e, 0xe7, 0x54, 0x0b, 0x8d, 0xc2, 0x41, 0xd1, 0x9e,
	0xc7, 0xef, 0x33, 0x87, 0x7c, 0x0a, 0xab, 0x3c, 0x09, 0xe8, 0x50, 0xdf, 0x0d, 0x22, 0x4f, 0x5c,
	0xf5, 0xaa, 0x0f, 0xd0, 0xad, 0x32, 0xb4, 0x7d, 0xa5, 0x4d, 0x64, 0x0f, 0xca, 0x91, 0x4a, 0xdc,
	0xe9, 0x0f, 0x7a, 0x5d, 0x16, 0x55, 0x67, 0x1a, 0x85, 0x83, 0x59, 0x7b, 0x29, 0x46, 0x5f, 0x23,
	0x48, 0x76, 0xa1, 0xec, 0x07, 0x6e, 0xe7, 0x36, 0x88, 0xae, 0x59, 0xd4, 0xf1, 0x1c, 0x5e, 0x7d,
	0xd8, 0x98, 0x39, 0x28, 0xda, 0x8b, 0x7e, 0xe0, 0x7e, 0x87, 0xe0, 0x99, 0xc3, 0xa5, 0xb4, 0x90,
	0x46, 0xb4, 0x27, 0xa5, 0xcd, 0x2a, 0x69, 0xf8, 0x7d, 0xe6, 0x58, 0xcf, 0xa0, 0x92, 0x2d, 0x27,
	0xf4, 0xef, 0xc8, 0x0e, 0xcc, 0x89, 0xc8, 0xa3, 0x3e, 0xaf, 0x16, 0x1a, 0x33, 0x07, 0xa5, 0x66,
	0xf1, 0xc8, 0xe9, 0x1e, 0xbd, 0x91, 0x88, 0x1d, 0x1b, 0xac, 0x5f, 0x0b, 0x50, 0x97, 0xa1, 0x57,
	0xc1, 0xc0, 0x77, 0xda, 0x22, 0x08, 0x15, 0xdf, 0x34, 0xfd, 0x78, 0x06, 0x55, 0x46, 0x23, 0xff,
	0xae, 0xc3, 0x45, 0x10, 0x86, 0x5e, 0xdf, 0x1d, 0xe9, 0xc9, 0x3a, 0xda, 0xdb, 0xb1, 0x79, 0xd8,
	0x96, 0x09, 0x95, 0x5c, 0xc2, 0x66, 0xbe, 0x1c, 0x59, 0xcf, 0x13, 0x58, 0xe7, 0x68, 0x41, 0x4a,
	0xb3, 0x5f, 0x05, 0xec, 0x57, 0x85, 0x67, 0xe2, 0xce, 0x1c, 0x6e, 0xfd, 0x51, 0x80, 0xe2, 0x79,
	0xe0, 0x30, 0xff, 0xac, 0xff, 0x2e, 0x20, 0xdb, 0x00, 0xaa, 0x9e, 0x3e, 0xed, 0xb1, 0xb8, 0xa2,
	0x22, 0x22, 0xaf, 0x69, 0x8f, 0x91, 0x3a, 0x14, 0x93, 0xac, 0x71, 0x11, 0x0b, 0xb7, 0x71, 0x2a,
	0xf2, 0x31, 0x00, 0xca, 0x64, 0x82, 0x45, 0xbc, 0x3a, 0x83, 0x2d, 0x5d, 0x92, 0x2d, 0xbd, 0xd4,
	0xa8, 0x6d, 0x38, 0x90, 0x3d, 0x98, 0xef, 0x31, 0x11, 0x79, 0x6f, 0xd5, 0x72, 0x96, 0x9a, 0x25,
	0xe9, 0x7b, 0xae, 0x20, 0x5b, 0xdb, 0xa4, 0xa2, 0x9e, 0x94, 0xd7, 0x09, 0xa9, 0xb8, 0x8a, 0xdb,
	0x51, 0x44, 0xe4, 0x92, 0x8a, 0x2b, 0xeb, 0x73, 0x28, 0xbd, 0xa0, 0x82, 0xb6, 0x99, 0x40, 0xfd,
	0x04, 0x1e, 0x1a, 0xca, 0xf1, 0xb7, 0xc4, 0x30, 0x56, 0xe9, 0xc5, 0xdf, 0x96, 0x07, 0xcb, 0x6d,
	0x7a, 0xc3, 0xda, 0xb2, 0x32, 0xbd, 0x96, 0xf7, 0xd4, 0xbe, 0x0a, 0xb3, 0xc1, 0x6d, 0x9f, 0x45,
	0x71, 0x1e, 0xf5, 0x41, 0x1a, 0x50, 0x72, 0x18, 0x7f, 0x1b, 0x79, 0xa1, 0xdc, 0x58, 0xb8, 0x7f,
	0x8b, 0xb6, 0x09, 0x59, 0xcb, 0x50, 0x36, 0xa8, 0x42, 0xff, 0xce, 0xfa, 0xa5, 0xa0, 0xd8, 0xb1,
	0xed, 0x9a, 0x7d, 0x17, 0x66, 0xb1, 0x2a, 0x24, 0x2e, 0x35, 0xcb, 0x47, 0xf2, 0x10, 0x27, 0x0b,
	0x63, 0x2b, 0x23, 0x39, 0x84, 0x05, 0x87, 0x0a, 0xda, 0xe1, 0x4c, 0xa0, 0x8e, 0x52, 0x73, 0x19,
	0x1d, 0x8d, 0x1e, 0xd8, 0xf3, 0x8e, 0xfa, 0x20, 0x3b, 0xb0, 0x28, 0x58, 0x9f, 0x07, 0x51, 0xa7,
	0x1b, 0xd0, 0xc8, 0x41, 0x71, 0x0b, 0x76, 0x49, 0x61, 0x5f, 0x4b, 0x48, 0x8b, 0x8b, 0x95, 0x48,
	0x71, 0x55, 0x58, 0x97, 0x3b, 0x8c, 0xde, 0x30, 0x47, 0x4a, 0xf6, 0x98, 0xde, 0xeb, 0xd6, 0x73,
	0x58, 0x1d, 0xb1, 0xc8, 0x6d, 0x77, 0x08, 0xb8, 0xe7, 0x3d, 0xa6, 0xcf, 0xd1, 0x8a, 0x5c, 0x48,
	0xac, 0xf7, 0xe2, 0x86, 0x45, 0x37, 0x1e, 0xbb, 0xb5, 0xb5, 0x87, 0xf5, 0x54, 0x4d, 0x16, 0x99,
	0x04, 0x49, 0xf9, 0x74, 0xdd, 0xb7, 0x4e, 0xd5, 0x11, 0x36, 0xe3, 0x24, 0xf7, 0x3e, 0xcc, 0x61,
	0x63, 0x34, 0x75, 0xb6, 0x6d, 0xb1, 0xd5, 0xb2, 0x87, 0xda, 0x53, 0x5d, 0xff, 0x0f, 0xfb, 0xdd,
	0x3a, 0x01, 0x92, 0xc9, 0x29, 0x15, 0x4d, 0xb5, 0x8e, 0xcd, 0x7f, 0x96, 0x61, 0xfe, 0x9c, 0xf6,
	0xa9, 0xcb, 0x22, 0x72, 0x0a, 0xa5, 0xe7, 0x11, 0xa3, 0x42, 0x6d, 0x11, 0xb2, 0x2e, 0xbb, 0x67,
	0x00, 0xb1, 0xd4, 0xda, 0xea, 0x08, 0x2e, 0x97, 0xeb, 0x03, 0xf2, 0x19, 0x2c, 0x48, 0x19, 0x18,
	0x5b, 0x91, 0x3e, 0xfa, 0x4b, 0x07, 0xae, 0xa4, 0x41, 0x15, 0x75, 0x0a, 0xa5, 0x17, 0xcc, 0x67,
	0x29, 0x52, 0x03, 0x48, 0x91, 0xa6, 0x70, 0x15, 0xfe, 0x25, 0x2c, 0xea, 0x8c, 0xaf, 0x3c, 0x2e,
	0xc8, 0x86, 0xc9, 0x21, 0x11, 0x9d, 0x60, 0x6d, 0xd4, 0x90, 0x08, 0x50, 0xc5, 0xe0, 0xc0, 0x35,
	0xab, 0x56, 0x13, 0x78, 0xb4, 0xea, 0x18, 0x57, 0xe1, 0x5f, 0x40, 0xb1, 0xc5, 0x04, 0x42, 0x9c,
	0xac, 0xc6, 0x24, 0xea, 0x53, 0x87, 0x92, 0x0c, 0x6a, 0xb6, 0x4b, 0x91, 0x56, 0x4c, 0x8f, 0x6c,
	0xbb, 0x52, 0x74, 0x2f, 0xa1, 0x6c, 0x33, 0xd7, 0xe3, 0x82, 0x45, 0x6a, 0x74, 0x92, 0x4d, 0xe9,
	0x96, 0xc6, 0x74, 0x86, 0x8d, 0x3c, 0x93, 0xca, 0x73, 0x02, 0xd0, 0x62, 0x22, 0x9e, 0xda, 0x44,
	0x37, 0x27, 0x7d, 0xa9, 0xd4, 0x2a, 0x59, 0x58, 0xc5, 0x5e, 0xc0, 0xca, 0xb7, 0xa1, 0x43, 0x05,
	0x53, 0x78, 0x5b, 0x50, 0xc1, 0xc8, 0x96, 0xf4, 0x1d, 0x81, 0x75, 0xa6, 0xda, 0x18, 0x6b, 0x92,
	0x30, 0x61, 0x79, 0x39, 0xf0, 0xd5, 0x0d, 0xb0, 0x95, 0x22, 0xd7, 0x70, 0x2a, 0x61, 0x8e, 0x55,
	0x25, 0xec, 0x43, 0x39, 0x7d, 0xcf, 0x92, 0x1a, 0x6e, 0xff, 0xdc, 0xb7, 0x44, 0xad, 0x9a, 0x6b,
	0x93, 0x99, 0xf6, 0x7f, 0xfe, 0xeb, 0xef, 0xdf, 0x1f, 0x34, 0xac, 0x3a, 0x3e, 0x59, 0xe2, 0x73,
	0x72, 0x9c, 0xf6, 0x3c, 0x29, 0x7c, 0x44, 0x7e, 0x2b, 0xa8, 0x63, 0x9d, 0xbd, 0x0e, 0x49, 0x23,
	0x49, 0x3d, 0xe6, 0xe2, 0xae, 0x3d, 0x9a, 0xe0, 0x21, 0x25, 0x3c, 0x45, 0x09, 0x9f, 0x58, 0x87,
	0x59, 0x09, 0x6a, 0x37, 0x1d, 0xe7, 0x45, 0x4a, 0x49, 0x6a, 0x81, 0xe3, 0x5b, 0x2c, 0x59, 0x60,
	0x7d, 0xab, 0x65, 0x16, 0x38, 0x81, 0x55, 0xfb, 0x28, 0x6c, 0xb4, 0xcd, 0x1a, 0x2f, 0x87, 0x97,
	0xa5, 0x85, 0x23, 0x35, 0xdf, 0xa8, 0xb3, 0x36, 0x26, 0xfa, 0x24, 0x14, 0xad, 0x49, 0x14, 0xad,
	0x29, 0x28, 0x5a, 0x93, 0x29, 0x7e, 0x84, 0x5a, 0xbe, 0x07, 0x0e, 0x8a, 0xbd, 0xf1, 0x19, 0xcc,
	0xb1, 0xf1, 0xf8, 0x3e, 0xb7, 0x84, 0xab, 0xcd, 0xc4, 0x37, 0xe6, 0x33, 0xca, 0xa8, 0x68, 0x2f,
	0x6e, 0xc8, 0x18, 0x7b, 0x8a, 0x6b, 0x92, 0x9b, 0x59, 0xd7, 0x44, 0xae, 0xd6, 0x74, 0x5c, 0xad,
	0x7b, 0xb9, 0x38, 0x6c, 0x8f, 0x75, 0xc2, 0x36, 0x1e, 0x4c, 0xcc, 0x63, 0x76, 0x72, 0x7f, 0x0a,
	0x4f, 0x45, 0xfa, 0x03, 0x14, 0x93, 0x87, 0x0a, 0x59, 0xc3, 0xf3, 0x91, 0x7d, 0x23, 0xd5, 0x2a,
	0x59, 0x58, 0x86, 0xee, 0xe0, 0x59, 0xa9, 0x5b, 0xeb, 0xa9, 0xb3, 0x92, 0x38, 0xc9, 0x63, 0x11,
	0xe7, 0xc6, 0x7b, 0xd0, 0xc8, 0x6d, 0xde, 0xc5, 0x46, 0x6e, 0xe3, 0x39, 0x32, 0x3e, 0x37, 0x3a,
	0xc9, 0xdc, 0x17, 0xb0, 0x62, 0xb3, 0x30, 0x88, 0xf4, 0x71, 0x7a, 0x15, 0xb8, 0x5c, 0x8d, 0xb1,
	0x11, 0x38, 0x35, 0xc6, 0x72, 0xac, 0xaa, 0x11, 0x01, 0x7c, 0x98, 0x79, 0xe8, 0x90, 0x7a, 0x32,
	0x2e, 0x46, 0x1f, 0x46, 0xb5, 0xcd, 0x7c, 0xa3, 0x4c, 0xb6, 0x8b, 0xf2, 0x1f, 0x91, 0xad, 0x91,
	0x49, 0x66, 0x66, 0xbf, 0x56, 0x73, 0x73, 0xf8, 0xb8, 0x31, 0xe6, 0xe6, 0xc8, 0x4b, 0xc9, 0x98,
	0x9b, 0x99, 0xd7, 0x90, 0xf5, 0x18, 0xd9, 0xb6, 0x49, 0x3d, 0x97, 0x4d, 0x79, 0x36, 0xdf, 0x00,
	0x0c, 0x4f, 0x95, 0xbc, 0xd8, 0xfe, 0x8f, 0x91, 0xdd, 0xf4, 0x60, 0x29, 0xb5, 0xc3, 0xc8, 0xf7,
	0xef, 0x6b, 0x34, 0x77, 0xe7, 0xf0, 0x9f, 0xd4, 0x27, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xae,
	0x00, 0x4b, 0xb9, 0xef, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerClient interface {
	//*
	// Create a Study from Study Config.
	// Generate a unique ID and store the Study to DB.
	CreateStudy(ctx context.Context, in *db.CreateStudyRequest, opts ...grpc.CallOption) (*db.CreateStudyReply, error)
	//*
	// Get a Study Config from DB by ID of Study.
	GetStudy(ctx context.Context, in *db.GetStudyRequest, opts ...grpc.CallOption) (*db.GetStudyReply, error)
	//*
	// Delete a Study from DB by Study ID.
	DeleteStudy(ctx context.Context, in *db.DeleteStudyRequest, opts ...grpc.CallOption) (*db.DeleteStudyReply, error)
	//*
	// Get all Study Configs from DB.
	GetStudyList(ctx context.Context, in *db.GetStudyListRequest, opts ...grpc.CallOption) (*db.GetStudyListReply, error)
	//*
	// Create a Trial from Trial Config.
	// Generate a unique ID and store the Trial to DB.
	CreateTrial(ctx context.Context, in *db.CreateTrialRequest, opts ...grpc.CallOption) (*db.CreateTrialReply, error)
	//*
	// Get a Trial Configs from DB by ID of Study.
	GetTrials(ctx context.Context, in *db.GetTrialsRequest, opts ...grpc.CallOption) (*db.GetTrialsReply, error)
	//*
	// Get a Trial Configuration from DB by ID of Trial.
	GetTrial(ctx context.Context, in *db.GetTrialRequest, opts ...grpc.CallOption) (*db.GetTrialReply, error)
	//*
	// Create a Worker from Worker Config.
	// Generate a unique ID and store the Worker to DB.
	RegisterWorker(ctx context.Context, in *db.RegisterWorkerRequest, opts ...grpc.CallOption) (*db.RegisterWorkerReply, error)
	//*
	// Get a Worker Configs and Status from DB by ID of Study, Trial or Worker.
	GetWorkers(ctx context.Context, in *db.GetWorkersRequest, opts ...grpc.CallOption) (*db.GetWorkersReply, error)
	//*
	// Update a Status of Worker.
	UpdateWorkerState(ctx context.Context, in *db.UpdateWorkerStateRequest, opts ...grpc.CallOption) (*db.UpdateWorkerStateReply, error)
	//*
	// Get full information related to specified Workers.
	// It includes Worker Config, HyperParameters and Metrics Logs.
	GetWorkerFullInfo(ctx context.Context, in *db.GetWorkerFullInfoRequest, opts ...grpc.CallOption) (*db.GetWorkerFullInfoReply, error)
	//*
	// Get Suggestions from a Suggestion service.
	GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error)
	GetShouldStopWorkers(ctx context.Context, in *GetShouldStopWorkersRequest, opts ...grpc.CallOption) (*GetShouldStopWorkersReply, error)
	//*
	// Get metrics of workers.
	// You can get all logs of metrics since start of the worker.
	GetMetrics(ctx context.Context, in *db.GetMetricsRequest, opts ...grpc.CallOption) (*db.GetMetricsReply, error)
	//*
	// Create or Update parameter set for a suggestion service.
	// If you specify an ID of parameter set, it will update the parameter set by your request.
	// If you don't specify an ID, it will create a new parameter set for corresponding study and suggestion service.
	// The parameters are key-value format.
	SetSuggestionParameters(ctx context.Context, in *db.SetSuggestionParametersRequest, opts ...grpc.CallOption) (*db.SetSuggestionParametersReply, error)
	//*
	// Get suggestion parameter set from DB specified.
	GetSuggestionParameters(ctx context.Context, in *db.GetSuggestionParametersRequest, opts ...grpc.CallOption) (*db.GetSuggestionParametersReply, error)
	//*
	// Get all suggestion parameter sets from DB.
	GetSuggestionParameterList(ctx context.Context, in *db.GetSuggestionParameterListRequest, opts ...grpc.CallOption) (*db.GetSuggestionParameterListReply, error)
	SetEarlyStoppingParameters(ctx context.Context, in *db.SetEarlyStoppingParametersRequest, opts ...grpc.CallOption) (*db.SetEarlyStoppingParametersReply, error)
	GetEarlyStoppingParameters(ctx context.Context, in *db.GetEarlyStoppingParametersRequest, opts ...grpc.CallOption) (*db.GetEarlyStoppingParametersReply, error)
	GetEarlyStoppingParameterList(ctx context.Context, in *db.GetEarlyStoppingParameterListRequest, opts ...grpc.CallOption) (*db.GetEarlyStoppingParameterListReply, error)
	SaveStudy(ctx context.Context, in *SaveStudyRequest, opts ...grpc.CallOption) (*SaveStudyReply, error)
	SaveModel(ctx context.Context, in *SaveModelRequest, opts ...grpc.CallOption) (*SaveModelReply, error)
	//*
	// Report a logs of metrics for workers.
	// The logs for each worker must have timestamp and must be ordered in time series.
	// When the log you reported are already reported before, it will be dismissed and get no error.
	ReportMetricsLogs(ctx context.Context, in *db.ReportMetricsLogsRequest, opts ...grpc.CallOption) (*db.ReportMetricsLogsReply, error)
	GetSavedStudies(ctx context.Context, in *GetSavedStudiesRequest, opts ...grpc.CallOption) (*GetSavedStudiesReply, error)
	GetSavedModels(ctx context.Context, in *GetSavedModelsRequest, opts ...grpc.CallOption) (*GetSavedModelsReply, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateStudy(ctx context.Context, in *db.CreateStudyRequest, opts ...grpc.CallOption) (*db.CreateStudyReply, error) {
	out := new(db.CreateStudyReply)
	err := c.cc.Invoke(ctx, "/api.Manager/CreateStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetStudy(ctx context.Context, in *db.GetStudyRequest, opts ...grpc.CallOption) (*db.GetStudyReply, error) {
	out := new(db.GetStudyReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteStudy(ctx context.Context, in *db.DeleteStudyRequest, opts ...grpc.CallOption) (*db.DeleteStudyReply, error) {
	out := new(db.DeleteStudyReply)
	err := c.cc.Invoke(ctx, "/api.Manager/DeleteStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetStudyList(ctx context.Context, in *db.GetStudyListRequest, opts ...grpc.CallOption) (*db.GetStudyListReply, error) {
	out := new(db.GetStudyListReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetStudyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateTrial(ctx context.Context, in *db.CreateTrialRequest, opts ...grpc.CallOption) (*db.CreateTrialReply, error) {
	out := new(db.CreateTrialReply)
	err := c.cc.Invoke(ctx, "/api.Manager/CreateTrial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTrials(ctx context.Context, in *db.GetTrialsRequest, opts ...grpc.CallOption) (*db.GetTrialsReply, error) {
	out := new(db.GetTrialsReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetTrials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTrial(ctx context.Context, in *db.GetTrialRequest, opts ...grpc.CallOption) (*db.GetTrialReply, error) {
	out := new(db.GetTrialReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetTrial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RegisterWorker(ctx context.Context, in *db.RegisterWorkerRequest, opts ...grpc.CallOption) (*db.RegisterWorkerReply, error) {
	out := new(db.RegisterWorkerReply)
	err := c.cc.Invoke(ctx, "/api.Manager/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetWorkers(ctx context.Context, in *db.GetWorkersRequest, opts ...grpc.CallOption) (*db.GetWorkersReply, error) {
	out := new(db.GetWorkersReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateWorkerState(ctx context.Context, in *db.UpdateWorkerStateRequest, opts ...grpc.CallOption) (*db.UpdateWorkerStateReply, error) {
	out := new(db.UpdateWorkerStateReply)
	err := c.cc.Invoke(ctx, "/api.Manager/UpdateWorkerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetWorkerFullInfo(ctx context.Context, in *db.GetWorkerFullInfoRequest, opts ...grpc.CallOption) (*db.GetWorkerFullInfoReply, error) {
	out := new(db.GetWorkerFullInfoReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetWorkerFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error) {
	out := new(GetSuggestionsReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetShouldStopWorkers(ctx context.Context, in *GetShouldStopWorkersRequest, opts ...grpc.CallOption) (*GetShouldStopWorkersReply, error) {
	out := new(GetShouldStopWorkersReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetShouldStopWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetMetrics(ctx context.Context, in *db.GetMetricsRequest, opts ...grpc.CallOption) (*db.GetMetricsReply, error) {
	out := new(db.GetMetricsReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetSuggestionParameters(ctx context.Context, in *db.SetSuggestionParametersRequest, opts ...grpc.CallOption) (*db.SetSuggestionParametersReply, error) {
	out := new(db.SetSuggestionParametersReply)
	err := c.cc.Invoke(ctx, "/api.Manager/SetSuggestionParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSuggestionParameters(ctx context.Context, in *db.GetSuggestionParametersRequest, opts ...grpc.CallOption) (*db.GetSuggestionParametersReply, error) {
	out := new(db.GetSuggestionParametersReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetSuggestionParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSuggestionParameterList(ctx context.Context, in *db.GetSuggestionParameterListRequest, opts ...grpc.CallOption) (*db.GetSuggestionParameterListReply, error) {
	out := new(db.GetSuggestionParameterListReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetSuggestionParameterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetEarlyStoppingParameters(ctx context.Context, in *db.SetEarlyStoppingParametersRequest, opts ...grpc.CallOption) (*db.SetEarlyStoppingParametersReply, error) {
	out := new(db.SetEarlyStoppingParametersReply)
	err := c.cc.Invoke(ctx, "/api.Manager/SetEarlyStoppingParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetEarlyStoppingParameters(ctx context.Context, in *db.GetEarlyStoppingParametersRequest, opts ...grpc.CallOption) (*db.GetEarlyStoppingParametersReply, error) {
	out := new(db.GetEarlyStoppingParametersReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetEarlyStoppingParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetEarlyStoppingParameterList(ctx context.Context, in *db.GetEarlyStoppingParameterListRequest, opts ...grpc.CallOption) (*db.GetEarlyStoppingParameterListReply, error) {
	out := new(db.GetEarlyStoppingParameterListReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetEarlyStoppingParameterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SaveStudy(ctx context.Context, in *SaveStudyRequest, opts ...grpc.CallOption) (*SaveStudyReply, error) {
	out := new(SaveStudyReply)
	err := c.cc.Invoke(ctx, "/api.Manager/SaveStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SaveModel(ctx context.Context, in *SaveModelRequest, opts ...grpc.CallOption) (*SaveModelReply, error) {
	out := new(SaveModelReply)
	err := c.cc.Invoke(ctx, "/api.Manager/SaveModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ReportMetricsLogs(ctx context.Context, in *db.ReportMetricsLogsRequest, opts ...grpc.CallOption) (*db.ReportMetricsLogsReply, error) {
	out := new(db.ReportMetricsLogsReply)
	err := c.cc.Invoke(ctx, "/api.Manager/ReportMetricsLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSavedStudies(ctx context.Context, in *GetSavedStudiesRequest, opts ...grpc.CallOption) (*GetSavedStudiesReply, error) {
	out := new(GetSavedStudiesReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetSavedStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSavedModels(ctx context.Context, in *GetSavedModelsRequest, opts ...grpc.CallOption) (*GetSavedModelsReply, error) {
	out := new(GetSavedModelsReply)
	err := c.cc.Invoke(ctx, "/api.Manager/GetSavedModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
type ManagerServer interface {
	//*
	// Create a Study from Study Config.
	// Generate a unique ID and store the Study to DB.
	CreateStudy(context.Context, *db.CreateStudyRequest) (*db.CreateStudyReply, error)
	//*
	// Get a Study Config from DB by ID of Study.
	GetStudy(context.Context, *db.GetStudyRequest) (*db.GetStudyReply, error)
	//*
	// Delete a Study from DB by Study ID.
	DeleteStudy(context.Context, *db.DeleteStudyRequest) (*db.DeleteStudyReply, error)
	//*
	// Get all Study Configs from DB.
	GetStudyList(context.Context, *db.GetStudyListRequest) (*db.GetStudyListReply, error)
	//*
	// Create a Trial from Trial Config.
	// Generate a unique ID and store the Trial to DB.
	CreateTrial(context.Context, *db.CreateTrialRequest) (*db.CreateTrialReply, error)
	//*
	// Get a Trial Configs from DB by ID of Study.
	GetTrials(context.Context, *db.GetTrialsRequest) (*db.GetTrialsReply, error)
	//*
	// Get a Trial Configuration from DB by ID of Trial.
	GetTrial(context.Context, *db.GetTrialRequest) (*db.GetTrialReply, error)
	//*
	// Create a Worker from Worker Config.
	// Generate a unique ID and store the Worker to DB.
	RegisterWorker(context.Context, *db.RegisterWorkerRequest) (*db.RegisterWorkerReply, error)
	//*
	// Get a Worker Configs and Status from DB by ID of Study, Trial or Worker.
	GetWorkers(context.Context, *db.GetWorkersRequest) (*db.GetWorkersReply, error)
	//*
	// Update a Status of Worker.
	UpdateWorkerState(context.Context, *db.UpdateWorkerStateRequest) (*db.UpdateWorkerStateReply, error)
	//*
	// Get full information related to specified Workers.
	// It includes Worker Config, HyperParameters and Metrics Logs.
	GetWorkerFullInfo(context.Context, *db.GetWorkerFullInfoRequest) (*db.GetWorkerFullInfoReply, error)
	//*
	// Get Suggestions from a Suggestion service.
	GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsReply, error)
	GetShouldStopWorkers(context.Context, *GetShouldStopWorkersRequest) (*GetShouldStopWorkersReply, error)
	//*
	// Get metrics of workers.
	// You can get all logs of metrics since start of the worker.
	GetMetrics(context.Context, *db.GetMetricsRequest) (*db.GetMetricsReply, error)
	//*
	// Create or Update parameter set for a suggestion service.
	// If you specify an ID of parameter set, it will update the parameter set by your request.
	// If you don't specify an ID, it will create a new parameter set for corresponding study and suggestion service.
	// The parameters are key-value format.
	SetSuggestionParameters(context.Context, *db.SetSuggestionParametersRequest) (*db.SetSuggestionParametersReply, error)
	//*
	// Get suggestion parameter set from DB specified.
	GetSuggestionParameters(context.Context, *db.GetSuggestionParametersRequest) (*db.GetSuggestionParametersReply, error)
	//*
	// Get all suggestion parameter sets from DB.
	GetSuggestionParameterList(context.Context, *db.GetSuggestionParameterListRequest) (*db.GetSuggestionParameterListReply, error)
	SetEarlyStoppingParameters(context.Context, *db.SetEarlyStoppingParametersRequest) (*db.SetEarlyStoppingParametersReply, error)
	GetEarlyStoppingParameters(context.Context, *db.GetEarlyStoppingParametersRequest) (*db.GetEarlyStoppingParametersReply, error)
	GetEarlyStoppingParameterList(context.Context, *db.GetEarlyStoppingParameterListRequest) (*db.GetEarlyStoppingParameterListReply, error)
	SaveStudy(context.Context, *SaveStudyRequest) (*SaveStudyReply, error)
	SaveModel(context.Context, *SaveModelRequest) (*SaveModelReply, error)
	//*
	// Report a logs of metrics for workers.
	// The logs for each worker must have timestamp and must be ordered in time series.
	// When the log you reported are already reported before, it will be dismissed and get no error.
	ReportMetricsLogs(context.Context, *db.ReportMetricsLogsRequest) (*db.ReportMetricsLogsReply, error)
	GetSavedStudies(context.Context, *GetSavedStudiesRequest) (*GetSavedStudiesReply, error)
	GetSavedModels(context.Context, *GetSavedModelsRequest) (*GetSavedModelsReply, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_CreateStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.CreateStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/CreateStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateStudy(ctx, req.(*db.CreateStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetStudy(ctx, req.(*db.GetStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.DeleteStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/DeleteStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteStudy(ctx, req.(*db.DeleteStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetStudyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetStudyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetStudyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetStudyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetStudyList(ctx, req.(*db.GetStudyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.CreateTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/CreateTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateTrial(ctx, req.(*db.CreateTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTrials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetTrialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTrials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetTrials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTrials(ctx, req.(*db.GetTrialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTrial(ctx, req.(*db.GetTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RegisterWorker(ctx, req.(*db.RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetWorkers(ctx, req.(*db.GetWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateWorkerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.UpdateWorkerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateWorkerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/UpdateWorkerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateWorkerState(ctx, req.(*db.UpdateWorkerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetWorkerFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetWorkerFullInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetWorkerFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetWorkerFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetWorkerFullInfo(ctx, req.(*db.GetWorkerFullInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSuggestions(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetShouldStopWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShouldStopWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetShouldStopWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetShouldStopWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetShouldStopWorkers(ctx, req.(*GetShouldStopWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetMetrics(ctx, req.(*db.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetSuggestionParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.SetSuggestionParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetSuggestionParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/SetSuggestionParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetSuggestionParameters(ctx, req.(*db.SetSuggestionParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSuggestionParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetSuggestionParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSuggestionParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetSuggestionParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSuggestionParameters(ctx, req.(*db.GetSuggestionParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSuggestionParameterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetSuggestionParameterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSuggestionParameterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetSuggestionParameterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSuggestionParameterList(ctx, req.(*db.GetSuggestionParameterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetEarlyStoppingParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.SetEarlyStoppingParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetEarlyStoppingParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/SetEarlyStoppingParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetEarlyStoppingParameters(ctx, req.(*db.SetEarlyStoppingParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetEarlyStoppingParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetEarlyStoppingParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetEarlyStoppingParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetEarlyStoppingParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetEarlyStoppingParameters(ctx, req.(*db.GetEarlyStoppingParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetEarlyStoppingParameterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.GetEarlyStoppingParameterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetEarlyStoppingParameterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetEarlyStoppingParameterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetEarlyStoppingParameterList(ctx, req.(*db.GetEarlyStoppingParameterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SaveStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SaveStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/SaveStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SaveStudy(ctx, req.(*SaveStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SaveModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SaveModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/SaveModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SaveModel(ctx, req.(*SaveModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ReportMetricsLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(db.ReportMetricsLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ReportMetricsLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/ReportMetricsLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ReportMetricsLogs(ctx, req.(*db.ReportMetricsLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSavedStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedStudiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSavedStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetSavedStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSavedStudies(ctx, req.(*GetSavedStudiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSavedModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSavedModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetSavedModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSavedModels(ctx, req.(*GetSavedModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudy",
			Handler:    _Manager_CreateStudy_Handler,
		},
		{
			MethodName: "GetStudy",
			Handler:    _Manager_GetStudy_Handler,
		},
		{
			MethodName: "DeleteStudy",
			Handler:    _Manager_DeleteStudy_Handler,
		},
		{
			MethodName: "GetStudyList",
			Handler:    _Manager_GetStudyList_Handler,
		},
		{
			MethodName: "CreateTrial",
			Handler:    _Manager_CreateTrial_Handler,
		},
		{
			MethodName: "GetTrials",
			Handler:    _Manager_GetTrials_Handler,
		},
		{
			MethodName: "GetTrial",
			Handler:    _Manager_GetTrial_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Manager_RegisterWorker_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _Manager_GetWorkers_Handler,
		},
		{
			MethodName: "UpdateWorkerState",
			Handler:    _Manager_UpdateWorkerState_Handler,
		},
		{
			MethodName: "GetWorkerFullInfo",
			Handler:    _Manager_GetWorkerFullInfo_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _Manager_GetSuggestions_Handler,
		},
		{
			MethodName: "GetShouldStopWorkers",
			Handler:    _Manager_GetShouldStopWorkers_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _Manager_GetMetrics_Handler,
		},
		{
			MethodName: "SetSuggestionParameters",
			Handler:    _Manager_SetSuggestionParameters_Handler,
		},
		{
			MethodName: "GetSuggestionParameters",
			Handler:    _Manager_GetSuggestionParameters_Handler,
		},
		{
			MethodName: "GetSuggestionParameterList",
			Handler:    _Manager_GetSuggestionParameterList_Handler,
		},
		{
			MethodName: "SetEarlyStoppingParameters",
			Handler:    _Manager_SetEarlyStoppingParameters_Handler,
		},
		{
			MethodName: "GetEarlyStoppingParameters",
			Handler:    _Manager_GetEarlyStoppingParameters_Handler,
		},
		{
			MethodName: "GetEarlyStoppingParameterList",
			Handler:    _Manager_GetEarlyStoppingParameterList_Handler,
		},
		{
			MethodName: "SaveStudy",
			Handler:    _Manager_SaveStudy_Handler,
		},
		{
			MethodName: "SaveModel",
			Handler:    _Manager_SaveModel_Handler,
		},
		{
			MethodName: "ReportMetricsLogs",
			Handler:    _Manager_ReportMetricsLogs_Handler,
		},
		{
			MethodName: "GetSavedStudies",
			Handler:    _Manager_GetSavedStudies_Handler,
		},
		{
			MethodName: "GetSavedModels",
			Handler:    _Manager_GetSavedModels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/api.proto",
}

// SuggestionClient is the client API for Suggestion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SuggestionClient interface {
	GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error)
}

type suggestionClient struct {
	cc *grpc.ClientConn
}

func NewSuggestionClient(cc *grpc.ClientConn) SuggestionClient {
	return &suggestionClient{cc}
}

func (c *suggestionClient) GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error) {
	out := new(GetSuggestionsReply)
	err := c.cc.Invoke(ctx, "/api.Suggestion/GetSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggestionServer is the server API for Suggestion service.
type SuggestionServer interface {
	GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsReply, error)
}

func RegisterSuggestionServer(s *grpc.Server, srv SuggestionServer) {
	s.RegisterService(&_Suggestion_serviceDesc, srv)
}

func _Suggestion_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Suggestion/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).GetSuggestions(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suggestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Suggestion",
	HandlerType: (*SuggestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuggestions",
			Handler:    _Suggestion_GetSuggestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/api.proto",
}

// EarlyStoppingClient is the client API for EarlyStopping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EarlyStoppingClient interface {
	GetShouldStopWorkers(ctx context.Context, in *GetShouldStopWorkersRequest, opts ...grpc.CallOption) (*GetShouldStopWorkersReply, error)
}

type earlyStoppingClient struct {
	cc *grpc.ClientConn
}

func NewEarlyStoppingClient(cc *grpc.ClientConn) EarlyStoppingClient {
	return &earlyStoppingClient{cc}
}

func (c *earlyStoppingClient) GetShouldStopWorkers(ctx context.Context, in *GetShouldStopWorkersRequest, opts ...grpc.CallOption) (*GetShouldStopWorkersReply, error) {
	out := new(GetShouldStopWorkersReply)
	err := c.cc.Invoke(ctx, "/api.EarlyStopping/GetShouldStopWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EarlyStoppingServer is the server API for EarlyStopping service.
type EarlyStoppingServer interface {
	GetShouldStopWorkers(context.Context, *GetShouldStopWorkersRequest) (*GetShouldStopWorkersReply, error)
}

func RegisterEarlyStoppingServer(s *grpc.Server, srv EarlyStoppingServer) {
	s.RegisterService(&_EarlyStopping_serviceDesc, srv)
}

func _EarlyStopping_GetShouldStopWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShouldStopWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarlyStoppingServer).GetShouldStopWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EarlyStopping/GetShouldStopWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarlyStoppingServer).GetShouldStopWorkers(ctx, req.(*GetShouldStopWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EarlyStopping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EarlyStopping",
	HandlerType: (*EarlyStoppingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShouldStopWorkers",
			Handler:    _EarlyStopping_GetShouldStopWorkers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/api.proto",
}
