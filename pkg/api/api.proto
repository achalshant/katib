/**
 * Katib API
 */
syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "github.com/kubeflow/katib/pkg/db/dbif.proto";

/**
 * Service for Main API for Katib
 * For each RPC service, we define mapping to HTTP REST API method.
 * The mapping includes the URL path, query parameters and request body.
 * https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.api#http
 */
service Manager {
    /**
     * Create a Study from Study Config.
     * Generate a unique ID and store the Study to DB.
     */
    rpc CreateStudy(db.CreateStudyRequest) returns (db.CreateStudyReply){
       
    };
    /** 
     * Get a Study Config from DB by ID of Study.
     */
    rpc GetStudy(db.GetStudyRequest) returns (db.GetStudyReply){
       
    };
    /** 
     * Delete a Study from DB by Study ID.
     */
    rpc DeleteStudy(db.DeleteStudyRequest) returns (db.DeleteStudyReply){
        
    };
    /**
     * Get all Study Configs from DB.
     */
    rpc GetStudyList(db.GetStudyListRequest) returns (db.GetStudyListReply){
        
    };
    /**
     * Create a Trial from Trial Config.
     * Generate a unique ID and store the Trial to DB.
     */
    rpc CreateTrial(db.CreateTrialRequest) returns (db.CreateTrialReply){
        
    };
    /** 
     * Get a Trial Configs from DB by ID of Study.
     */
    rpc GetTrials(db.GetTrialsRequest) returns (db.GetTrialsReply){
        
    };
    /**
     * Get a Trial Configuration from DB by ID of Trial.
     */
    rpc GetTrial(db.GetTrialRequest) returns (db.GetTrialReply){
        
    };
    /**
     * Create a Worker from Worker Config.
     * Generate a unique ID and store the Worker to DB.
     */
    rpc RegisterWorker(db.RegisterWorkerRequest) returns (db.RegisterWorkerReply){
        
    };
    /** 
     * Get a Worker Configs and Status from DB by ID of Study, Trial or Worker.
     */
    rpc GetWorkers(db.GetWorkersRequest) returns (db.GetWorkersReply){
        
    };
    /** 
     * Update a Status of Worker.
     */
    rpc UpdateWorkerState(db.UpdateWorkerStateRequest) returns (db.UpdateWorkerStateReply){
        
    };
    /** 
     * Get full information related to specified Workers.
     * It includes Worker Config, HyperParameters and Metrics Logs.
     */
    rpc GetWorkerFullInfo(db.GetWorkerFullInfoRequest) returns (db.GetWorkerFullInfoReply){
        
    };
    /** 
     * Get Suggestions from a Suggestion service.
     */
    rpc GetSuggestions(GetSuggestionsRequest) returns (GetSuggestionsReply){
        option (google.api.http) = {
            post: "/api/Manager/GetSuggestions"
            body: "*"
        };
    };
    rpc GetShouldStopWorkers(GetShouldStopWorkersRequest) returns (GetShouldStopWorkersReply){
        option (google.api.http) = {
            post: "/api/Manager/GetTrials/GetShouldStopWorkers"
            body: "*"
        };
    };
    /**
     * Get metrics of workers.
     * You can get all logs of metrics since start of the worker.
     */
    rpc GetMetrics(db.GetMetricsRequest) returns (db.GetMetricsReply){
        
    };
    /**
     * Create or Update parameter set for a suggestion service.
     * If you specify an ID of parameter set, it will update the parameter set by your request.
     * If you don't specify an ID, it will create a new parameter set for corresponding study and suggestion service.
     * The parameters are key-value format.
     */
    rpc SetSuggestionParameters(db.SetSuggestionParametersRequest) returns (db.SetSuggestionParametersReply){
        
    };
    /**
     * Get suggestion parameter set from DB specified.
     */
    rpc GetSuggestionParameters(db.GetSuggestionParametersRequest) returns (db.GetSuggestionParametersReply){
        
    };
    /**
     * Get all suggestion parameter sets from DB.
     */
    rpc GetSuggestionParameterList(db.GetSuggestionParameterListRequest) returns (db.GetSuggestionParameterListReply){
        
    };
    rpc SetEarlyStoppingParameters(db.SetEarlyStoppingParametersRequest) returns (db.SetEarlyStoppingParametersReply){
        
    };
    rpc GetEarlyStoppingParameters(db.GetEarlyStoppingParametersRequest) returns (db.GetEarlyStoppingParametersReply){
        
    };
    rpc GetEarlyStoppingParameterList(db.GetEarlyStoppingParameterListRequest) returns (db.GetEarlyStoppingParameterListReply){
        
    };
    rpc SaveStudy(SaveStudyRequest) returns(SaveStudyReply){
        option (google.api.http) = {
            post: "/api/Manager/SaveStudy"
            body: "*"
        };
    };
    rpc SaveModel(SaveModelRequest) returns(SaveModelReply){
        option (google.api.http) = {
            post: "/api/Manager/SaveModel"
            body: "*"
        };
    };
    /**
     * Report a logs of metrics for workers.
     * The logs for each worker must have timestamp and must be ordered in time series.
     * When the log you reported are already reported before, it will be dismissed and get no error.
     */
    rpc ReportMetricsLogs(db.ReportMetricsLogsRequest) returns (db.ReportMetricsLogsReply){
        
    };
    rpc GetSavedStudies(GetSavedStudiesRequest) returns(GetSavedStudiesReply){
        option (google.api.http) = {
            get: "/api/Manager/GetSavedStudies"
        };
    };
    rpc GetSavedModels(GetSavedModelsRequest) returns(GetSavedModelsReply){
         option (google.api.http) = {
            get: "/api/Manager/GetSavedModels"
        };
    };
}

service Suggestion {
    rpc GetSuggestions(GetSuggestionsRequest) returns (GetSuggestionsReply);
}

service EarlyStopping {
    rpc GetShouldStopWorkers(GetShouldStopWorkersRequest) returns (GetShouldStopWorkersReply);
}

message GetSuggestionsRequest {
    string study_id = 1;
    string suggestion_algorithm = 2;
    int32 request_number = 3;
    repeated string log_worker_ids = 4;
    string param_id = 5;
}

message GetSuggestionsReply {
    repeated db.Trial trials = 1;
}

message GetShouldStopWorkersRequest {
    string study_id = 1;
    string early_stopping_algorithm = 2;
    string param_id = 5;
}

message GetShouldStopWorkersReply {
    repeated string should_stop_worker_ids = 1;
}

message ModelInfo {
    string study_name = 1;  
    string worker_id = 2; 
    repeated db.Parameter parameters = 3; 
    repeated db.Metrics metrics = 4;
    string model_path = 5; 
}

message DataSetInfo {
    string name = 1;
    string path = 2;
}

message SaveStudyRequest {
    string study_name = 1;
    string owner = 2;
    string description = 3;
}

message SaveStudyReply {
}

message SaveModelRequest {
    ModelInfo model = 1;
    DataSetInfo data_set = 2;
    bool tensor_board = 3;
}

message SaveModelReply {
}

message GetSavedStudiesRequest {
}

message GetSavedStudiesReply {
    repeated db.StudyOverview studies = 1;
}

message GetSavedModelsRequest {
    string study_name = 1;
}

message GetSavedModelsReply {
    repeated ModelInfo models = 1;
}

message GetSavedModelRequest {
    string study_name = 1;
    string worker_id = 2;
}

message GetSavedModelReply {
    ModelInfo model = 1;
}
